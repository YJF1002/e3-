package cn.xupt.pagehelper;
import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.MessageProducer;
import javax.jms.Queue;
import javax.jms.Session;
import javax.jms.TextMessage;

import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.activemq.command.ActiveMQMessage;
import org.apache.activemq.command.ActiveMQTextMessage;
import org.junit.Test;


public class ActiveMaTest {

	@Test
	public void testQueueProducer() throws Exception{
		//1.创建工厂连接对象
		ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("tcp://192.168.25.122:61616");
	
		//2.使用工厂对象创建一个Connection对象
		Connection connection = connectionFactory.createConnection();
		//3.开启连接，调用connection对象的start方法
		connection.start();
		//4.创建一个Session对象
		Session session =  connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
		//5.使用Session对象创建一个Destination对象。两种形式queue。topic，现在应该使用queue
		 Queue queue = session.createQueue("test-queue");
		//6.使用session对象创建一个Producer对象
		 MessageProducer producer = session.createProducer(queue);
		//7.创建一个Message对象。可以使用TextMessage。
		 TextMessage textMessage = new ActiveMQTextMessage();
		 textMessage.setText("hello Activemq");
		//8.发送消息
		 producer.send(textMessage);
		//9.关闭资源
		 producer.close();
		 session.close();
		 connection.close();
		 
	}
	
	@Test
	public void testQueueConsumer() throws Exception{
		//1.创建一个ConnectionFactory对象连接MQ服务器
		ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("tcp://192.168.25.122:61616");

		//2.创建一个连接对象
		Connection connection = connectionFactory.createConnection();

		//3.开启连接
		connection.start();
		//4.使用connection对象创建一个Session对象
		Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
		//5.创建一个Destination对象，quest对象
		Queue queue = session.createQueue("test-queue");
		//6.使用Session对象创建一个消费者对象
		MessageConsumer consumer = session.createConsumer(queue);
		//7.接受消息
		consumer.setMessageListener(new MessageListener() {
			
			@Override
			public void onMessage(Message message) {
				//8.打印结果
				TextMessage textMessage = (TextMessage) message;
				String text;
				try {
					text = textMessage.getText();
						System.out.println(text);
				} catch (Exception e) {
					// TODO: handle exception
					e.printStackTrace();
				}
				
			}
		});
		//等待接收消息
		System.in.read();
		//9.关闭资源
		 consumer.close();
		 session.close();
		 connection.close();
		 
		
	}
}
