package cn.xupt.content.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import cn.xupt.common.pojo.EasyUITreeNode;
import cn.xupt.common.utils.E3Result;
import cn.xupt.content.service.ContentCategoryService;
import cn.xupt.content.service.util.RecursiveDelete;
import cn.xupt.mapper.TbContentCategoryMapper;
import cn.xupt.pojo.TbContentCategory;
import cn.xupt.pojo.TbContentCategoryExample;
import cn.xupt.pojo.TbItem;
import cn.xupt.pojo.TbItemExample;
import cn.xupt.pojo.TbContentCategoryExample.Criteria;
/**
 * 内容分类管理
 * <p>Title: ContentCategoryServiceImpl</p>
 * <p>Description: </p>
 * <p>Company: www.itcast.cn</p> 
 * @version 1.0
 */
@Service
public class ContentCategoryServiceImpl implements ContentCategoryService {

	@Autowired
	private TbContentCategoryMapper ContentCategoryMapper;
	
	
	final RecursiveDelete recursiveDelete = new RecursiveDelete();

	@Override
	public List<EasyUITreeNode> getContentCatList(long prentId) {
		//根据prentid查询子节点列表
		TbContentCategoryExample example = new TbContentCategoryExample();
		Criteria criteria = example.createCriteria();
		//设置查询条件
		criteria.andParentIdEqualTo(prentId);
		//执行查询
		List<TbContentCategory>catList = ContentCategoryMapper.selectByExample(example);
		//转换成
		List<EasyUITreeNode> nodeList = new ArrayList<>();
		for(TbContentCategory tbContentCategory : catList){
			EasyUITreeNode node = new EasyUITreeNode();
			node.setId(tbContentCategory.getId());
			node.setText(tbContentCategory.getName());
			node.setState(tbContentCategory.getIsParent()?"closed":"open");
			//添加到列	
			nodeList.add(node);
		}
		
		return nodeList;
	}

	@Override
	public E3Result addContentCategory(Long parentId, String name) {
		//创建一个tb_content_category表对应的pojo对象
		TbContentCategory contentCategory = new TbContentCategory();
		//设置pojo属性
		contentCategory.setParentId(parentId);
		contentCategory.setName(name);
		//1正常2.删除
		//新添加的节点一定是叶子节点
		contentCategory.setStatus(1);
		contentCategory.setIsParent(false);
		contentCategory.setSortOrder(1);
		contentCategory.setCreated(new Date());
		//插入到数据库
		ContentCategoryMapper.insert(contentCategory);
		//判断父节点的isparent属性，如果不是true改为true
		//根据parentid查询父节点
		TbContentCategory parent = ContentCategoryMapper.selectByPrimaryKey(parentId);
		if(!parent.getIsParent()){
			parent.setIsParent(true);
			//更新到数据库中
			ContentCategoryMapper.updateByPrimaryKey(parent);
		}
		//返回结果，返回E3result
		return E3Result.ok(contentCategory);
	}

	@Override
	public E3Result deleteContentCategory(Long id) {
		recursiveDelete.deleteCategoryAndChildNode(id);
		return E3Result.ok();
	}

	@Override
	public E3Result updateContentCategory(Long id, String name) {
		//创建一个tb_content_category表对应的pojo对象
				TbContentCategory contentCategory = ContentCategoryMapper.selectByPrimaryKey(id) ;
				//设置pojo属性
				contentCategory.setName(name);
				//更新到数据库
				ContentCategoryMapper.updateByPrimaryKey(contentCategory);
				return E3Result.ok(contentCategory);
			}

	}


